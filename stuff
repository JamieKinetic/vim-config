# Syntax
- vim-scripts/applescript.vim
- vim-scripts/cmake.vim
- vim-scripts/cmake.vim-syntax
- vim-scripts/jQuery
- nathanaelkane/vim-indent-guides
- skwp/vim-rspec
- Shougo/context_filetype
- lilydjwg/colorizer
- vim-scripts/gtags.vim

# vimwiki, local file completion
function vimwiki#OmniComplete(findstart, base)
    if a:findstart
        let line = getline('.')
        if line =~ '{'.'{local:.*'
            return searchpos('local:', 'bn', line('.'))[1] + 5
        endif
        return -3
    else
        let prefix = matchstr(a:base, '.*\/')
        let suffix = a:base[len(prefix):]
        let path = g:vimwiki_list[0].path . prefix
        let output = system('ls ' . path)
        if output =~ 'No such file or directory'
            return []
        endif
        let list = filter(split(output, '\n'), 'v:val =~ suffix')
        let list = map(list, 'prefix . v:val')
        return list
    endif
endfunction

setlocal omnifunc=vimwiki#OmniComplete

# compl-spelling
nnoremap <C-y> :call <SID>SpellCorrect()<CR>
function! s:SpellCorrect()
  let s:oldspell = &spell
  set spell
  normal! 1z=
  let &spell = s:oldspell
  unlet s:oldspell
endfunction

" For keyboards that have Insert and Del keys (not Macs), make them do the
" right thing.
function! s:NormalPaste()
  if @* != ""
    normal "*gP
  endif
endfunction

function! s:SelectPaste()
  if @* != ""
    if col(".") < col("'<")
      normal "*gp
    else
      normal "*gP
    endif
  endif
endfunction

map <S-Del> "*x
map <C-Insert> "*y
map <S-Insert> :set paste<CR>:call <SID>NormalPaste()<CR>:set nopaste<CR>
imap <S-Insert> x<Esc>:set paste<CR>:call <SID>NormalPaste()<CR>:set nopaste<CR>s
cmap <S-Insert> <C-R>*
vmap <S-Insert> "-x:set paste<CR>:call <SID>SelectPaste()<CR>:set nopaste<CR>

" Easier linewise reselection
nnoremap <leader>V V`]

function! s:WhenPUMVisible(ifVisible, ifNotVisible)
  if pumvisible()
    return a:ifVisible
  else
    return a:ifNotVisible
  endif
endfunction

" If a popupmenu is visible (pumvisible), change the behaviour of various
" keys to do something meaningful with the menu.
inoremap <expr> <Esc> <SID>WhenPUMVisible("\<C-E>", "\<Esc>")
inoremap <expr> <Down> <SID>WhenPUMVisible("\<C-N>", "\<Down>")
inoremap <expr> <Up> <SID>WhenPUMVisible("\<C-P>", "\<Up>")
inoremap <expr> <PageDown> <SID>WhenPUMVisible("\<PageDown>\<C-P>\<C-N>", "\<PageDown>")
inoremap <expr> <PageUp> <SID>WhenPUMVisible("\<PageUp>\<C-P>\<C-N>", "\<PageUp>")
